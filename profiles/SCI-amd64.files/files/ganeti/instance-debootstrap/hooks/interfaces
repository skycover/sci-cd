#!/bin/bash

# Copyright (C) 2009 Google Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.

# Modified by Dmitry Chernyak for project SCI

# This is a script that configures you /etc/network/interfaces after
# installation.
# You should fullfill a file /etc/ganeti/networks in format:
# "NETWORK NETMASK BROADCAST GATEWAY"
# And to place a /usr/local/sbin/gnt-ip2net script which will translate the
# IP addresses of your networks to form NETWORK/NUM

#TARGET=/tmp/test
#NIC_COUNT=1
#INSTANCE_NAME=vg-test2

IP2NET=/usr/local/sbin/gnt-ip2net

if [ -z "$TARGET" -o ! -d "$TARGET" ]; then
  echo "Missing target directory"
  exit 1
fi

if [ ! -d "$TARGET/etc/network" ]; then
  echo "Missing target network directory"
  exit 1
fi

if [ -z "$NIC_COUNT" ]; then
  echo "Missing NIC COUNT"
  exit 1
fi

  cat > $TARGET/etc/network/interfaces <<EOF
# This file describes the network interfaces available on your system
# and how to activate them. For more information, see interfaces(5).

auto lo
iface lo inet loopback
EOF

set -x

if [ "$NIC_COUNT" -gt 0 ]; then

  if [ -z "$NIC_0_IP" ]; then

    NIC_0_IP=`getent hosts $INSTANCE_NAME|awk '{print $1; exit 0}'`

  fi

  for i in `seq 0 $NIC_COUNT`; do

    if [ $i -lt $NIC_COUNT ]; then
    if [ -z "`eval echo "\\$NIC_${i}_IP"`" ]; then
      echo Configuring dhcp on NIC $i
      cat >> $TARGET/etc/network/interfaces <<EOF

auto eth$i
iface eth$i inet dhcp
EOF

    else

     echo Configuring static IP on NIC $i
     # /etc/ganeti/networks has format "NETWORK NETMASK BROADCAST GATEWAY"
     NETWORKNUM=`eval $IP2NET "\\$NIC_${i}_IP"`
     IP=`eval echo "\\$NIC_${i}_IP"`
     
     if [ -z "$NETWORKNUM" ]; then
       echo Unable to guess the network for NIC $i from /etc/ganeti/networks
       echo using default mask /24
       NETMASK="255.255.255.0"
       eval NIC_${i}_NETWORK=`ipcalc -n $IP $NETMASK|awk -F"[: /]+" '/^Network:/{print $2; exit 0}'`
       eval NIC_${i}_NETMASK=`ipcalc -n $IP $NETMASK|awk -F"[: /]+" '/^Netmask:/{print $2; exit 0}'`
       eval NIC_${i}_BROADCAST=`ipcalc -n $IP $NETMASK|awk -F"[: /]+" '/^Broadcast:/{print $2; exit 0}'`
     else
       eval NIC_${i}_NETWORK=`grep "$NETWORKNUM" /etc/ganeti/networks|awk '{print $1; exit 0}'`
       eval NIC_${i}_NETMASK=`grep "$NETWORKNUM" /etc/ganeti/networks|awk '{print $2; exit 0}'`
       eval NIC_${i}_BROADCAST=`grep "$NETWORKNUM" /etc/ganeti/networks|awk '{print $3; exit 0}'`
       eval NIC_${i}_GATEWAY=`grep "$NETWORKNUM" /etc/ganeti/networks|awk '{print $4; exit 0}'`
     fi

     if [ -z "`eval echo "\\$NIC_${i}_NETWORK"`" ]; then
       echo Unable to get interface settings for network $NETWORKNUM NIC $i
       exit 1
     fi

     cat >> $TARGET/etc/network/interfaces <<EOF

auto eth$i
iface eth$i inet static
	address `eval echo "\\$NIC_${i}_IP"`
	netmask `eval echo "\\$NIC_${i}_NETMASK"`
	network `eval echo "\\$NIC_${i}_NETWORK"`
	broadcast `eval echo "\\$NIC_${i}_BROADCAST"`
EOF

      g=`eval echo "\\$NIC_${i}_GATEWAY"`
      if [ -z "$gateway_set" -a -n "$g" ]; then
         gateway_set=yes
         cat >> $TARGET/etc/network/interfaces <<EOF
	gateway `eval echo "\\$NIC_${i}_GATEWAY"`
EOF
      fi

    fi
    fi

  done

fi
