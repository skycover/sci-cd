#!/bin/bash
workdir="/var/lib/ganeti"
configfile="$workdir/config.data"
configfile_obr="/tmp/config.data.new.$$"
temp_file="/tmp/gnt-sardp.$$"
function get_struct_fromconfigfile {
	# 1 - inbox file
	cat $1 | sed 's/,/,\n/g' | awk 'BEGIN {
		tabs=0
	} {
		for ( i=0 ; i <= tabs ; i++ ) printf ("\t")
		print $0
		tabs=tabs+gsub(/[{\[]/,"")
		tabs=tabs-gsub(/[}\]]/,"")
	}'
}

function get_node_uid {
	cat $configfile_obr | awk -v  node_name="$1" '
		BEGIN {
			this_node=0
		} {
			if ( $0 ~ "\"nodes\":") nodes=1
			if ( nodes == 1 ) {
				if ( $0 ~ node_name ) this_node=1
				if  ( ( $0 ~ "uuid" ) && ( this_node == 1 ) ) {
					print $0
					this_node=0
				}
			}
		}
	' | grep -oE "[a-f0-9-]{36}"
}

function get_instances {
	cat $configfile_obr | awk -v node=$node_uuid '
		BEGIN {
			FS="[\":,]+"
		}	{
			if ( $0 ~ "\"instances\":") instances++
			if ( $0 ~ "\"name\":" ) {
				name=$4
			}
			if ( $0 ~ "\"primary_node\":" && $0 ~ node ) print name
		}
	'
}

function get_instance_disks {
	instance_name=$1	
	cat $configfile_obr | awk -v instance_name=$instance_name -v node=$node_uuid '
		BEGIN {
			FS="[\":,]+"
		}	{
			if ( $0 ~ "\"instances\":") instances++
			if ( $0 ~ "name" && $(NF-1) == instance_name ) this_instance=1
			if ( this_instance == 1 ) {
				if ( $0 ~ "[a-f0-9-]{36}.disk[0-9]+" && $0 !~ "_meta" ) print group,$2
				if ( $0 ~ "logical_id" ) {
					group=$(NF-1)
				}
			}
			if ( $0 ~ node && $0 ~ "primary_node" ) this_instance=0
		}
	' 
	# | grep -oE "[a-f0-9-]{36}.disk[0-9]+_data" | sort | uniq
}
trap 'echo "\nExit"; rm $temp_file; rm $configfile_obr ;exit 1' 2 3 15 
# get structured file
get_struct_fromconfigfile $configfile > $configfile_obr
node_uuid=$(get_node_uid $HOSTNAME)
# define wks > disk > dm
get_instances | while read i; do 
	get_instance_disks "$i" | while read j;do
		echo $i $j
	done
done | awk '
	{
		printf("%s_",$1)
		split($3,disk,"[._]")
		gsub("-","--", $3)
		printf("%s %s-%s %s\n",disk[2],$2,$3,$4)
	}
' > $temp_file

disks_count=$(cat $temp_file | wc -l )
[[ $disks_count == 0 ]] && {
	echo "on this node was not found runned instance"
	exit 
}
disks_print=$(ls -l /dev/mapper | awk -v filename1="$temp_file" '{
                                        while ((getline k < filename1)>0){
                                                split(k,line," ")
                                                if(line[2] == $9) dc++
                                                }
                                        close (filename1)
                                        } END {
                                                print dc
                                        }')
dig="nodynamic"
if (echo $@ |grep -q '\<[0-9]*\>'); then
        dig="dynamic"
fi
sar -dp $* |  awk -v filename="$temp_file" -v disks_print="$disks_print" -v sar_type="$dig" ' BEGIN {
        time="00:00:01"
        }       {
        while ((getline l < filename)>0){
                        split(l,s," ")
                        if ($2==s[2]) {
                                if (time != $1 && $2 != "DEV" ) {
                                        if (sar_type == "nodynamic" && time !="00:00:01") {
                                                print "_________________________________________________________________________________________________________________________________________________"
                                                printf("%9s %30s %12s %12s %12s %12s %12s %12s %12s %12s\n",time,"SUM/Worst",sum[3],sum[4],sum[5],max[6],max[7],max[8],max[9],max[10])
                                        }
                                        print "================================================================================================================================================="
                                        printf("%9s %30s %12s %12s %12s %12s %12s %12s %12s %12s\n"," ","DEV","tps","rd_sec/s","wr_sec/s","avgrq-sz","avgqu-sz","await","svctm","%util")
                                time=$1
                                for (i=3;i<=10; i++) {
                                                sum[i]=0
                                                max[i]=0
                                        }
                                }
                                $2=s[1]
                                gsub(/,/,".")
                                for (i=3;i<=10; i++) sum[i]+=$(i)
                                for (i=3;i<=10; i++) if (max[i]<$(i)) max[i]=$(i)
                                printf("%9s %30s %12s %12s %12s %12s %12s %12s %12s %12s\n",$1,$2,$3,$4,$5,$6,$7,$8,$9,$10)
                                diskprint++
                        }
                }
        close(filename)
        }
        {
                if (diskprint==disks_print && sar_type == "dynamic"){
                        diskprint=0
                        print "_________________________________________________________________________________________________________________________________________________"
                        printf("%9s %30s %12s %12s %12s %12s %12s %12s %12s %12s\n",time,"SUM/Worst",sum[3],sum[4],sum[5],max[6],max[7],max[8],max[9],max[10])
                }
        } END {
                if (sar_type == "nodynamic") {
                        print "_________________________________________________________________________________________________________________________________________________"
                        printf("%9s %30s %12s %12s %12s %12s %12s %12s %12s %12s\n",time,"SUM/Worst",sum[3],sum[4],sum[5],max[6],max[7],max[8],max[9],max[10])
                }

        }'
rm $temp_file
rm $configfile_obr
